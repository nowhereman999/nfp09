;
; TTL  DISPATCH OPERATION THROUGH THE FUNCTION TABLES
; NAM DISPCH
;
; LINKING LOADER DEFINITONS
;
; XDEF  DISPAT
;
; XREF  FMUL
; XREF  FADD,CHKZER,CHKINF
; XREF  FDIV,DIVZER
; XREF  FREM
; XREF  FSQRT,SQINCK
; XREF  GETINT
; XREF  MAGCMP,CMPZER,CMPINF,NANCMP,INFAR1
; XREF  INFAR2,ARG1UN,ARG2UN,BOTHUN
; XREF  FFIX,BIGINT,FIXNAN,FIXZER
; XREF  BDCNVT,OUTNDC
; XREF  FMOVE,MOVUN
; XREF  FABS,FNEG
; XREF  RTAR1,RTAR2,RTNAN,RTINF,RTDNAN
; XREF  RTZERO,NAN1,NAN4,NAN9,NAN10
; XREF  ROMSTR
; XREF  DECBIN,FLOAT
;
; REVISION HISTORY:
;
;  DATE         PROGRAMMER         REASON
;
;  01.JUL.80    G. STEVENS         ORIGINAL
;  28.JUL.80    G. STEVENS         TRANSPOSE TABLES
;  18.AUG.80    G. STEVENS         FIX COMPARE TABLES FOR UN ZERO
;  26.JUN.22    @thorpej           Updated for asm6809.  New comments
;                                  are in mixed-case.
;
;*****************************************************************
;
;    DISPAT --
;         THIS SUBROUTINE USES THE FUNCTION CODE TO
;    SELECTION A FUNCTION TABLE. IT THEN USES THE TYPES
;    OF THE ARGUMENTS TO JUMP THROUGH THE ADDRESSES IN
;    THE FUNCTION TABLE TO THE PROPER SUBROUTINE TO
;    PERFORM THE FUNCTION.
;
;         NO REGISTERS ARE PRESERVED; ALL RELEVANT STATE
;    IS STORED IN THE STACK FRAME.
;

; XXXJRT I'm sorry these table are ugly.  I cannot get the
; asm6809 macro processor to do the right thing here.

;
; Original comment:
;    THE FOLLOWING TABLE IS INDEXED BY THE (FUNCTION NUMBER-1)
;    AND CONTAINS THE ADDRESSES OF THE FUNCTION TABLES FOR
;    EACH FLOATING-POINT OPERATION.
;
; Clarification: The table is not actually indexed by (FN number - 1).
; The function numbers are even, i.e. 0, 2, 4, ...  They therefore form
; a byte offset into this table filled with 2-byte entries.
;
FUNTBL
  FDB ADDTBL-ROMSTR,SUBTBL-ROMSTR,MULTBL-ROMSTR,DIVTBL-ROMSTR,REMTBL-ROMSTR
  FDB CMPTBL-ROMSTR,CMPTBL-ROMSTR,CMPTBL-ROMSTR,CMPTBL-ROMSTR,SQRTBL-ROMSTR
  FDB INTTBL-ROMSTR,FIXTBL-ROMSTR,FIXTBL-ROMSTR,MOVTBL-ROMSTR,BNDTBL-ROMSTR
  FDB ABSTBL-ROMSTR,NEGTBL-ROMSTR
  ; These 3 entries are direct jumps.
  FDB DECBIN-ROMSTR,FLOAT-ROMSTR,FLOAT-ROMSTR

;*****************************************************************
;
;    ENTER HERE ON DISPAT CALL
;
;        FIRST GET THE ADDRESS OF THE TABLE FOR A PARTICULAR
;
DISPAT
	LDB	FUNCT,U		; GET FUNCTION CODE
	ANDB	#$3F		; MASK OUT OPCODE NBR
	CMPB	#FCSUB
	BNE	1F
	LDA	TYPE2,U		; CHECK FOR A NAN
	CMPA	#TYNAN
	BEQ	1F		; Branch if ARG2 is a NaN
	LDA	ARG2,U
	EORA	#$80		; FOR SUBTRACT, CHANGE SIGN
	STA	ARG2,U		; AND ADD
1
	LEAY	FUNTBL,PCR
	CMPB	#FCNOJP		; UNLESS OPERATOR HAS NO
	BGE	1F		; TABLE
	LDD	B,Y		; OFFSET OF FUNCTION LOOKUP
	LEAY	ROMSTR,PCR
	LEAY	D,Y		; ADDR IS NOW IN Y
	;
	; Original comment:
	;	 NOW CREATE OFFSET IN OPERATION
	;   TABLE USING TYPES OF OPERANDS. IT IS
	;   ASSUMED THAT A NON-EXISTENT ARGUMENT
	;   HAS A TYPE OF ZERO.
	;
	; Further explanation: As with the function numbers, the
	; type numbers are even (0, 2, 4, ...).  There are 5 argument
	; types (Normalized, Zero, Infinity, NaN, Non-Normalized),
	; thus each table row has 5 columns (hence the *5 multiplier).
	; Each table entry is 2 bytes.  The type of argument 1 selects
	; the row, the type of argument 2 selects the column by byte
	; offset (not index).  For monadic functions, the type of
	; argument 1 is always TYNORM (0).
	;
	LDA	TYPE1,U
	LDB	#5
	MUL
	ADDB	TYPE2,U		; OFFSET = TYP1*5 + TYP2
	;
	;	 NOW GET PROCESSING ROUTINE OUT
	;    OF OPERATION TABLE AND JSR TO IT.
	;
1	LDD	B,Y
	LEAY	ROMSTR,PCR
	;
	; Original code had the following comment here:
	;
	; <quote>
	;   HERE IS COMMON RETURN POINT FOR  ALL
	;     PROCESSING ROUTINES.
	; </quote>
	;
	; However, there was no common post-processing performed,
	; only an RTS instruction.  As such, we can shave several
	; cycles off of every floating point operation by simply
	; performing a tail-call here.
	;
	JMP	D,Y		; JUMP TO PROCESSING SUBROUTINE

;*****************************************************************
;
;	 OPERATION DEFINITION TABLES
;
;	 THE FOLLOWING TABLES CONTAIN ADDRESS
;    OF THE SUBROUTINES THAT OPERATE ON
;    ARGUMENTS OF VARIOUS TYPES. THE TABLES
;    ARE ORGANIZED BY COLUMNS, I.E. EACH
;    'FDB' LINE IN A TABLE BELOW CORRESPONDS
;    TO A ROW IN THE TABLE IN THE MOTOROLA SPEC.
;

;
;    TABLE FOR MULTIPLY
;
MULTBL
  FDB FMUL-ROMSTR,  RTZERO-ROMSTR,RTINF-ROMSTR,RTAR2-ROMSTR, FMUL-ROMSTR
  FDB RTZERO-ROMSTR,RTZERO-ROMSTR,NAN9-ROMSTR, RTAR2-ROMSTR, RTZERO-ROMSTR
  FDB RTINF-ROMSTR, NAN9-ROMSTR,  RTINF-ROMSTR,RTAR2-ROMSTR, RTINF-ROMSTR
  FDB RTAR1-ROMSTR, RTAR1-ROMSTR, RTAR1-ROMSTR,RTDNAN-ROMSTR,RTAR1-ROMSTR
  FDB FMUL-ROMSTR,  RTZERO-ROMSTR,RTINF-ROMSTR,RTAR2-ROMSTR, FMUL-ROMSTR

;
;    TABLE FOR ADD/SUBTRACT
;
ADDTBL
SUBTBL
  FDB FADD-ROMSTR, FADD-ROMSTR,  RTAR2-ROMSTR, RTAR2-ROMSTR, FADD-ROMSTR
  FDB FADD-ROMSTR, CHKZER-ROMSTR,RTAR2-ROMSTR, RTAR2-ROMSTR, RTAR2-ROMSTR
  FDB RTAR1-ROMSTR,RTAR1-ROMSTR, CHKINF-ROMSTR,RTAR2-ROMSTR, RTAR1-ROMSTR
  FDB RTAR1-ROMSTR,RTAR1-ROMSTR, RTAR1-ROMSTR, RTDNAN-ROMSTR,RTAR1-ROMSTR
  FDB FADD-ROMSTR, RTAR1-ROMSTR, RTAR2-ROMSTR, RTAR2-ROMSTR, FADD-ROMSTR

;
;   TABLE FOR DIVISION
;
DIVTBL
  FDB FDIV-ROMSTR,  DIVZER-ROMSTR,RTZERO-ROMSTR,RTAR2-ROMSTR, NAN4-ROMSTR
  FDB RTZERO-ROMSTR,NAN4-ROMSTR,  RTZERO-ROMSTR,RTAR2-ROMSTR, RTZERO-ROMSTR
  FDB RTINF-ROMSTR, RTINF-ROMSTR, NAN4-ROMSTR,  RTAR2-ROMSTR, RTINF-ROMSTR
  FDB RTAR1-ROMSTR, RTAR1-ROMSTR, RTAR1-ROMSTR, RTDNAN-ROMSTR,RTAR1-ROMSTR
  FDB FDIV-ROMSTR,  DIVZER-ROMSTR,RTZERO-ROMSTR,RTAR2-ROMSTR, NAN4-ROMSTR

;
;    TABLE FOR REMAINDER
;
REMTBL
  FDB FREM-ROMSTR, NAN10-ROMSTR,RTAR1-ROMSTR,RTAR2-ROMSTR, NAN10-ROMSTR
  FDB RTAR1-ROMSTR,NAN10-ROMSTR,RTAR1-ROMSTR,RTAR2-ROMSTR, NAN10-ROMSTR
  FDB NAN10-ROMSTR,NAN10-ROMSTR,NAN10-ROMSTR,RTAR2-ROMSTR, NAN10-ROMSTR
  FDB RTAR1-ROMSTR,RTAR1-ROMSTR,RTAR1-ROMSTR,RTDNAN-ROMSTR,RTAR1-ROMSTR
  FDB FREM-ROMSTR, NAN10-ROMSTR,RTAR1-ROMSTR,RTAR2-ROMSTR, NAN10-ROMSTR

;
;    TABLE FOR SQUARE ROOT
;
SQRTBL
  FDB FSQRT-ROMSTR,RTAR2-ROMSTR,SQINCK-ROMSTR,RTAR2-ROMSTR,NAN1-ROMSTR

;
;   TABLE INTEGER PART
;
INTTBL
  FDB GETINT-ROMSTR,RTAR2-ROMSTR,RTAR2-ROMSTR,RTAR2-ROMSTR,GETINT-ROMSTR

;
;   TABLE FOR ALL FOUR COMPARE OPERATIONS
;
CMPTBL
  FDB MAGCMP-ROMSTR,MAGCMP-ROMSTR,INFAR2-ROMSTR,NANCMP-ROMSTR,ARG2UN-ROMSTR
  FDB MAGCMP-ROMSTR,CMPZER-ROMSTR,INFAR2-ROMSTR,NANCMP-ROMSTR,ARG2UN-ROMSTR
  FDB INFAR1-ROMSTR,INFAR1-ROMSTR,CMPINF-ROMSTR,NANCMP-ROMSTR,INFAR1-ROMSTR
  FDB NANCMP-ROMSTR,NANCMP-ROMSTR,NANCMP-ROMSTR,NANCMP-ROMSTR,NANCMP-ROMSTR
  FDB ARG1UN-ROMSTR,ARG1UN-ROMSTR,INFAR2-ROMSTR,NANCMP-ROMSTR,BOTHUN-ROMSTR

;
;   TABLE FOR FP-TO-BINARY INTEGER
;
FIXTBL
  FDB FFIX-ROMSTR,FIXZER-ROMSTR,BIGINT-ROMSTR,FIXNAN-ROMSTR,FFIX-ROMSTR

;
;    TABLE FOR FP TO DECIMAL STRING CONVERSION
;
BNDTBL
  FDB BDCNVT-ROMSTR,OUTNDC-ROMSTR,OUTNDC-ROMSTR,OUTNDC-ROMSTR,BDCNVT-ROMSTR

;
;     TABLE FOR MOVE OPERATION
;
MOVTBL
  FDB FMOVE-ROMSTR,RTAR2-ROMSTR,RTAR2-ROMSTR,RTAR2-ROMSTR,MOVUN-ROMSTR

;
; TABLE FOR ABSOLUTE VALUE FUNCTION
;
ABSTBL
  FDB  FABS-ROMSTR,FABS-ROMSTR,FABS-ROMSTR,RTAR2-ROMSTR,FABS-ROMSTR

;
; TABLE FOR NEGATE FUNTION FUNCTION
;
NEGTBL
  FDB  FNEG-ROMSTR,FNEG-ROMSTR,FNEG-ROMSTR,RTAR2-ROMSTR,FNEG-ROMSTR
