;
; TTL  DISPATCH OPERATION THROUGH THE FUNCTION TABLES
; NAM DISPCH
;
; LINKING LOADER DEFINITONS
;
; XDEF  DISPAT
;
; XREF  FMUL
; XREF  FADD,CHKZER,CHKINF
; XREF  FDIV,DIVZER
; XREF  FREM
; XREF  FSQRT,SQINCK
; XREF  GETINT
; XREF  MAGCMP,CMPZER,CMPINF,NANCMP,INFAR1
; XREF  INFAR2,ARG1UN,ARG2UN,BOTHUN
; XREF  FFIX,BIGINT,FIXNAN,FIXZER
; XREF  BDCNVT,OUTNDC
; XREF  FMOVE,MOVUN
; XREF  FABS,FNEG
; XREF  RTAR1,RTAR2,RTNAN,RTINF,RTDNAN
; XREF  RTZERO,NAN1,NAN4,NAN9,NAN10
; XREF  ROMSTR
; XREF  DECBIN,FLOAT
;
; REVISION HISTORY:
;
;  DATE         PROGRAMMER         REASON
;
;  01.JUL.80    G. STEVENS         ORIGINAL
;  28.JUL.80    G. STEVENS         TRANSPOSE TABLES
;  18.AUG.80    G. STEVENS         FIX COMPARE TABLES FOR UN ZERO
;  26.JUN.22    @thorpej           Updated for asm6809.  New comments
;                                  are in mixed-case.
;
;*****************************************************************
;
;    DISPAT --
;         THIS SUBROUTINE USES THE FUNCTION CODE TO
;    SELECTION A FUNCTION TABLE. IT THEN USES THE TYPES
;    OF THE ARGUMENTS TO JUMP THROUGH THE ADDRESSES IN
;    THE FUNCTION TABLE TO THE PROPER SUBROUTINE TO
;    PERFORM THE FUNCTION.
;
;         NO REGISTERS ARE PRESERVED; ALL RELEVANT STATE
;    IS STORED IN THE STACK FRAME.
;

;
; N.B. all references to ROMSTR have been removed from the tables
; in order to improve readability.  ROMSTR is arranged to have the
; value $0000, so there is no need to subtract it from any other
; symbols in order to obtain the relative offset.
;

;
; Original comment:
;    THE FOLLOWING TABLE IS INDEXED BY THE (FUNCTION NUMBER-1)
;    AND CONTAINS THE ADDRESSES OF THE FUNCTION TABLES FOR
;    EACH FLOATING-POINT OPERATION.
;
; Clarification: The table is not actually indexed by (FN number - 1).
; The function numbers are even, i.e. 0, 2, 4, ...  They therefore form
; a byte offset into this table filled with 2-byte entries.
;
; N.B. these entries must be PC-relative to the instruction that calculates
; the table address!
;
FUNTBL
  FDB ADDTBL-TBLREF, SUBTBL-TBLREF, MULTBL-TBLREF, DIVTBL-TBLREF, REMTBL-TBLREF
  FDB CMPTBL-TBLREF, CMPTBL-TBLREF, CMPTBL-TBLREF, CMPTBL-TBLREF, SQRTBL-TBLREF
  FDB INTTBL-TBLREF, FIXTBL-TBLREF, FIXTBL-TBLREF, MOVTBL-TBLREF, BNDTBL-TBLREF
  FDB ABSTBL-TBLREF, NEGTBL-TBLREF
	; These 3 entries are direct jumps.
	FDB	DECBIN, FLOAT, FLOAT

;*****************************************************************
;
;    ENTER HERE ON DISPAT CALL
;
;        FIRST GET THE ADDRESS OF THE TABLE FOR A PARTICULAR
;
DISPAT
	LDB	FUNCT,U		; GET FUNCTION CODE
	ANDB	#$3F		; MASK OUT OPCODE NBR
	CMPB	#FCSUB
	BNE	1F
	LDA	TYPE2,U		; CHECK FOR A NAN
	CMPA	#TYNAN
	BEQ	1F		; Branch if ARG2 is a NaN
	LDA	ARG2,U
	EORA	#$80		; FOR SUBTRACT, CHANGE SIGN
	STA	ARG2,U		; AND ADD
1
	LEAY	FUNTBL,PCR
	CMPB	#FCNOJP		; UNLESS OPERATOR HAS NO
	BGE	1F		; TABLE
	LDD	B,Y		; OFFSET OF FUNCTION LOOKUP
	LEAY	,PCR
TBLREF
	LEAY	D,Y		; ADDR IS NOW IN Y
	;
	; Original comment:
	;	 NOW CREATE OFFSET IN OPERATION
	;   TABLE USING TYPES OF OPERANDS. IT IS
	;   ASSUMED THAT A NON-EXISTENT ARGUMENT
	;   HAS A TYPE OF ZERO.
	;
	; Further explanation: As with the function numbers, the
	; type numbers are even (0, 2, 4, ...).  There are 5 argument
	; types (Normalized, Zero, Infinity, NaN, Non-Normalized),
	; thus each table row has 5 columns (hence the *5 multiplier).
	; Each table entry is 2 bytes.  The type of argument 1 selects
	; the row, the type of argument 2 selects the column by byte
	; offset (not index).  For monadic functions, the type of
	; argument 1 is always TYNORM (0).
	;
	LDA	TYPE1,U
	LDB	#5
	MUL
	ADDB	TYPE2,U		; OFFSET = TYP1*5 + TYP2
	;
	;	 NOW GET PROCESSING ROUTINE OUT
	;    OF OPERATION TABLE AND JSR TO IT.
	;
1	LDD	B,Y
	LEAY	,PCR
FTREF
	;
	; Original code had the following comment here:
	;
	; <quote>
	;   HERE IS COMMON RETURN POINT FOR  ALL
	;     PROCESSING ROUTINES.
	; </quote>
	;
	; However, there was no common post-processing performed,
	; only an RTS instruction.  As such, we can shave several
	; cycles off of every floating point operation by simply
	; performing a tail-call here.
	;
	JMP	D,Y		; JUMP TO PROCESSING SUBROUTINE

;*****************************************************************
;
;	 OPERATION DEFINITION TABLES
;
;	 THE FOLLOWING TABLES CONTAIN ADDRESS
;    OF THE SUBROUTINES THAT OPERATE ON
;    ARGUMENTS OF VARIOUS TYPES. THE TABLES
;    ARE ORGANIZED BY COLUMNS, I.E. EACH
;    'FDB' LINE IN A TABLE BELOW CORRESPONDS
;    TO A ROW IN THE TABLE IN THE MOTOROLA SPEC.
;
; N.B. these entries must be PC-relative to the instruction that calculates
; the function address!
;

;
;    TABLE FOR MULTIPLY
;
MULTBL
  FDB FMUL-FTREF,   RTZERO-FTREF, RTINF-FTREF, RTAR2-FTREF,  FMUL-FTREF
  FDB RTZERO-FTREF, RTZERO-FTREF, NAN9-FTREF,  RTAR2-FTREF,  RTZERO-FTREF
  FDB RTINF-FTREF,  NAN9-FTREF,   RTINF-FTREF, RTAR2-FTREF,  RTINF-FTREF
  FDB RTAR1-FTREF,  RTAR1-FTREF,  RTAR1-FTREF, RTDNAN-FTREF, RTAR1-FTREF
  FDB FMUL-FTREF,   RTZERO-FTREF, RTINF-FTREF, RTAR2-FTREF,  FMUL-FTREF

;
;    TABLE FOR ADD/SUBTRACT
;
ADDTBL
SUBTBL
  FDB FADD-FTREF,  FADD-FTREF,   RTAR2-FTREF,  RTAR2-FTREF,  FADD-FTREF
  FDB FADD-FTREF,  CHKZER-FTREF, RTAR2-FTREF,  RTAR2-FTREF,  RTAR2-FTREF
  FDB RTAR1-FTREF, RTAR1-FTREF,  CHKINF-FTREF, RTAR2-FTREF,  RTAR1-FTREF
  FDB RTAR1-FTREF, RTAR1-FTREF,  RTAR1-FTREF,  RTDNAN-FTREF, RTAR1-FTREF
  FDB FADD-FTREF,  RTAR1-FTREF,  RTAR2-FTREF,  RTAR2-FTREF,  FADD-FTREF

;
;   TABLE FOR DIVISION
;
DIVTBL
  FDB FDIV-FTREF,   DIVZER-FTREF, RTZERO-FTREF, RTAR2-FTREF,  NAN4-FTREF
  FDB RTZERO-FTREF, NAN4-FTREF,   RTZERO-FTREF, RTAR2-FTREF,  RTZERO-FTREF
  FDB RTINF-FTREF,  RTINF-FTREF,  NAN4-FTREF,   RTAR2-FTREF,  RTINF-FTREF
  FDB RTAR1-FTREF,  RTAR1-FTREF,  RTAR1-FTREF,  RTDNAN-FTREF, RTAR1-FTREF
  FDB FDIV-FTREF,   DIVZER-FTREF, RTZERO-FTREF, RTAR2-FTREF,  NAN4-FTREF

;
;    TABLE FOR REMAINDER
;
REMTBL
  FDB FREM-FTREF,  NAN10-FTREF, RTAR1-FTREF, RTAR2-FTREF,  NAN10-FTREF
  FDB RTAR1-FTREF, NAN10-FTREF, RTAR1-FTREF, RTAR2-FTREF,  NAN10-FTREF
  FDB NAN10-FTREF, NAN10-FTREF, NAN10-FTREF, RTAR2-FTREF,  NAN10-FTREF
  FDB RTAR1-FTREF, RTAR1-FTREF, RTAR1-FTREF, RTDNAN-FTREF, RTAR1-FTREF
  FDB FREM-FTREF,  NAN10-FTREF, RTAR1-FTREF, RTAR2-FTREF,  NAN10-FTREF

;
;    TABLE FOR SQUARE ROOT
;
SQRTBL
  FDB FSQRT-FTREF, RTAR2-FTREF, SQINCK-FTREF, RTAR2-FTREF, NAN1-FTREF

;
;   TABLE INTEGER PART
;
INTTBL
  FDB GETINT-FTREF, RTAR2-FTREF, RTAR2-FTREF, RTAR2-FTREF, GETINT-FTREF

;
;   TABLE FOR ALL FOUR COMPARE OPERATIONS
;
CMPTBL
  FDB MAGCMP-FTREF, MAGCMP-FTREF, INFAR2-FTREF, NANCMP-FTREF, ARG2UN-FTREF
  FDB MAGCMP-FTREF, CMPZER-FTREF, INFAR2-FTREF, NANCMP-FTREF, ARG2UN-FTREF
  FDB INFAR1-FTREF, INFAR1-FTREF, CMPINF-FTREF, NANCMP-FTREF, INFAR1-FTREF
  FDB NANCMP-FTREF, NANCMP-FTREF, NANCMP-FTREF, NANCMP-FTREF, NANCMP-FTREF
  FDB ARG1UN-FTREF, ARG1UN-FTREF, INFAR2-FTREF, NANCMP-FTREF, BOTHUN-FTREF

;
;   TABLE FOR FP-TO-BINARY INTEGER
;
FIXTBL
  FDB FFIX-FTREF, FIXZER-FTREF, BIGINT-FTREF, FIXNAN-FTREF, FFIX-FTREF

;
;    TABLE FOR FP TO DECIMAL STRING CONVERSION
;
BNDTBL
  FDB BDCNVT-FTREF, OUTNDC-FTREF, OUTNDC-FTREF, OUTNDC-FTREF, BDCNVT-FTREF

;
;     TABLE FOR MOVE OPERATION
;
MOVTBL
  FDB FMOVE-FTREF, RTAR2-FTREF, RTAR2-FTREF, RTAR2-FTREF, MOVUN-FTREF

;
; TABLE FOR ABSOLUTE VALUE FUNCTION
;
ABSTBL
  FDB FABS-FTREF, FABS-FTREF, FABS-FTREF, RTAR2-FTREF, FABS-FTREF

;
; TABLE FOR NEGATE FUNCTION
;
NEGTBL
  FDB FNEG-FTREF, FNEG-FTREF, FNEG-FTREF, RTAR2-FTREF, FNEG-FTREF
